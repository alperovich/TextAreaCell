package TextArea.runtime;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_ComponentBase;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.NodeReadAccessInEditorListener;
import jetbrains.mps.smodel.NodeReadAccessCasterInEditor;
import jetbrains.mps.nodeEditor.cells.IPropertyAccessor;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.NotNull;
import javax.swing.JComponent;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;

public class EditorCell_TextArea extends EditorCell_ComponentBase {
  private ModelAccessor myAccessor;
  private JTextArea myArea = new JTextArea(5, 20);
  private JScrollPane myPane = new JScrollPane(myArea);
  public EditorCell_TextArea(EditorContext editorContext, SNode node, ModelAccessor accessor) {
    super(editorContext, node);
    this.myAccessor = accessor;
    myArea.setText(accessor.getText());
    myArea.getDocument().addDocumentListener(new MyDocumentListener());
  }
  public static EditorCell_TextArea createCell(EditorContext editorContext, SNode node, ModelAccessor accessor) {
    NodeReadAccessInEditorListener listener = NodeReadAccessCasterInEditor.getReadAccessListener();
    if (accessor instanceof IPropertyAccessor) {
      if (listener != null) {
        listener.clearCleanlyReadAccessProperties();
      }
    }
    EditorCell_TextArea result = new EditorCell_TextArea(editorContext, node, accessor);

    for (Pair<SNodeReference, String> pair : listener.popCleanlyReadAccessedProperties()) {
      editorContext.getEditorComponent().getUpdater().getCurrentUpdateSession().registerCleanDependency(result, pair);
    }
    return result;
  }
  @NotNull
  @Override
  public JComponent getComponent() {
    return myPane;
  }
  private void changeText() {
    getContext().getRepository().getModelAccess().executeCommandInEDT(new Runnable() {
      public void run() {
        if (!(myAccessor.getText().equals(myArea.getText()))) {
          myAccessor.setText(myArea.getText());
        }
      }
    });

  }
  @Override
  public void synchronizeViewWithModel() {
    if (!(myAccessor.getText().equals(myArea.getText()))) {
      myArea.setText(myAccessor.getText());
    }

  }

  private class MyDocumentListener implements DocumentListener {
    @Override
    public void insertUpdate(DocumentEvent event) {
      changeText();
    }
    @Override
    public void removeUpdate(DocumentEvent event) {
      changeText();
    }
    @Override
    public void changedUpdate(DocumentEvent event) {
      changeText();
    }
  }
}
