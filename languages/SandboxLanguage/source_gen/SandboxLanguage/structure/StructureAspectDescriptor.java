package SandboxLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptConceptWithProperty = createDescriptorForConceptWithProperty();
  /*package*/ final ConceptDescriptor myConceptRoot = createDescriptorForRoot();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConceptWithProperty, myConceptRoot);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ConceptWithProperty:
        return myConceptConceptWithProperty;
      case LanguageConceptSwitch.Root:
        return myConceptRoot;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForConceptWithProperty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SandboxLanguage", "ConceptWithProperty", 0x590a8ba24895455bL, 0xbf6c3f39378dab00L, 0x243609db3acb5551L);
    b.class_(false, false, false);
    b.origin("r:d86c248b-15ca-401b-ad8d-9ea451c949b5(SandboxLanguage.structure)/2609283871296673105");
    b.version(2);
    b.property("prop", 0x243609db3acb724dL).type(PrimitiveTypeId.STRING).origin("2609283871296680525").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SandboxLanguage", "Root", 0x590a8ba24895455bL, 0xbf6c3f39378dab00L, 0x243609db3acb6ec6L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d86c248b-15ca-401b-ad8d-9ea451c949b5(SandboxLanguage.structure)/2609283871296679622");
    b.version(2);
    b.aggregate("children", 0x243609db3acb6fc7L).target(0x590a8ba24895455bL, 0xbf6c3f39378dab00L, 0x243609db3acb5551L).optional(true).ordered(true).multiple(true).origin("2609283871296679879").done();
    return b.create();
  }
}
